// schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id         Int      @id @default(autoincrement())
  username        String   @unique
  password_hash   String
  email           String   @unique
  role            UserRole
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  profile_picture_url String?

  student_profile Student?
  teacher_profile Teacher?
  staff_profile   Staff?

  student_enrollments Registration[]           @relation("UserStudentEnrollments")
  courses_taught      ScheduledCourse[]        @relation("UserCoursesTaught")
  authored_announcements Announcement[]         @relation("UserAuthoredAnnouncements")
  uploaded_materials  CourseMaterial[]       @relation("UserUploadedMaterials")
  audit_logs          AuditLog[]             @relation("UserAuditLogs")


  @@index([username])
  @@index([email])
}

model Student {
  user_id         Int      @id // This is both PK and FK
  user            User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  first_name      String?
  last_name       String?
  department_id   Int?
  department      Department? @relation(fields: [department_id], references: [department_id])
  enrollment_date DateTime @default(now())
  phone_number    String?
  address         String?
  updated_at      DateTime @updatedAt
}

model Teacher {
  user_id        Int      @id // This is both PK and FK
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  first_name     String?
  last_name      String?
  department_id  Int?
  department     Department? @relation(fields: [department_id], references: [department_id])
  office_location String?
  phone_number   String?
  updated_at     DateTime @updatedAt
}

model Staff {
  user_id        Int      @id // This is both PK and FK
  user           User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  first_name     String?
  last_name      String?
  job_title      String?
  is_super_admin Boolean  @default(false)
  updated_at     DateTime @updatedAt
}

model Department {
  department_id Int      @id @default(autoincrement())
  name          String   @unique
  description   String?  @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  courses  Course[]
  students Student[]
  teachers Teacher[]
}

model Course {
  course_id   Int      @id @default(autoincrement())
  course_code String   @unique
  title       String
  description String?  @db.Text
  credits     Int
  department_id Int? // Optional if a course can be cross-departmental or general
  department    Department? @relation(fields: [department_id], references: [department_id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  prerequisitesRequired Prerequisite[] @relation("CoursePrerequisites") // Prerequisites FOR this course
  prerequisiteFor       Prerequisite[] @relation("PrerequisiteCourse")   // Courses THIS course is a prerequisite for
  scheduled_courses   ScheduledCourse[]
}

model Prerequisite {
  prerequisite_id       Int   @id @default(autoincrement())
  course_id             Int // The course that HAS this prerequisite
  course                Course @relation("CoursePrerequisites", fields: [course_id], references: [course_id])
  prerequisite_course_id Int // The course that IS the prerequisite
  prerequisiteCourse    Course @relation("PrerequisiteCourse", fields: [prerequisite_course_id], references: [course_id])

  @@unique([course_id, prerequisite_course_id])
  @@index([prerequisite_course_id])
}

model Semester {
  semester_id             Int      @id @default(autoincrement())
  name                    String
  academic_year           Int
  term                    SemesterTerm
  start_date              DateTime @db.Date
  end_date                DateTime @db.Date
  registration_start_date DateTime
  registration_end_date   DateTime
  add_drop_start_date     DateTime
  add_drop_end_date       DateTime
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  scheduled_courses ScheduledCourse[]
  announcements     Announcement[]    @relation("SemesterAnnouncements")
}

model Building {
  building_id Int    @id @default(autoincrement())
  name        String @unique
  address     String? @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  rooms Room[]
}

model Room {
  room_id     Int      @id @default(autoincrement())
  building_id Int
  building    Building @relation(fields: [building_id], references: [building_id])
  room_number String
  capacity    Int
  type        String? // e.g., Lecture Hall, Lab
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  scheduled_courses ScheduledCourse[]

  @@unique([building_id, room_number])
}

model ScheduledCourse {
  scheduled_course_id Int      @id @default(autoincrement())
  course_id             Int
  course                Course   @relation(fields: [course_id], references: [course_id])
  semester_id           Int
  semester              Semester @relation(fields: [semester_id], references: [semester_id])
  teacher_id            Int
  teacher               User     @relation("UserCoursesTaught", fields: [teacher_id], references: [user_id]) // Relation to User (Teacher)
  room_id               Int?
  room                  Room?    @relation(fields: [room_id], references: [room_id])
  section_number        String
  max_capacity          Int
  current_enrollment    Int      @default(0)
  days_of_week          String?  // e.g., MWF, TTH
  start_time            DateTime? @db.Time // Store as TIME type
  end_time              DateTime? @db.Time // Store as TIME type
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  registrations           Registration[]
  course_materials        CourseMaterial[]
  assessments             Assessment[]
  targetedByAnnouncements AnnouncementTargetSection[]

  @@index([course_id])
  @@index([semester_id])
  @@index([teacher_id])
  @@index([room_id])
}

model Registration {
  registration_id     Int      @id @default(autoincrement())
  student_id          Int
  student             User     @relation("UserStudentEnrollments", fields: [student_id], references: [user_id]) // Relation to User (Student)
  scheduled_course_id Int
  scheduled_course    ScheduledCourse @relation(fields: [scheduled_course_id], references: [scheduled_course_id])
  registration_date   DateTime @default(now())
  status              RegistrationStatus @default(Registered)
  overall_percentage  Float?
  final_letter_grade  String?
  grade_points        Float?   // Calculated: grade_point_for_letter * course_credits
  updated_at          DateTime @updatedAt

  assessment_scores StudentAssessmentScore[]

  @@unique([student_id, scheduled_course_id])
  @@index([scheduled_course_id])
}

model CourseMaterial {
  material_id         Int          @id @default(autoincrement())
  scheduled_course_id Int
  scheduled_course    ScheduledCourse @relation(fields: [scheduled_course_id], references: [scheduled_course_id])
  title               String
  description         String?      @db.Text
  material_type       MaterialType // Enum: File, Link
  file_path           String?      // For File type
  url                 String?      // For Link type
  uploaded_by         Int          // User ID of the uploader (teacher/staff)
  uploader            User         @relation("UserUploadedMaterials", fields: [uploaded_by], references: [user_id])
  upload_timestamp    DateTime     @default(now())
}

model Assessment {
  assessment_id       Int      @id @default(autoincrement())
  scheduled_course_id Int
  scheduled_course    ScheduledCourse @relation(fields: [scheduled_course_id], references: [scheduled_course_id])
  name                String
  max_score           Int
  assessment_type     String?  // e.g., Quiz, Midterm, Final, Assignment
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  student_scores StudentAssessmentScore[]
}

model StudentAssessmentScore {
  student_assessment_score_id Int      @id @default(autoincrement())
  registration_id             Int
  registration                Registration @relation(fields: [registration_id], references: [registration_id])
  assessment_id               Int
  assessment                  Assessment   @relation(fields: [assessment_id], references: [assessment_id])
  score_achieved              Float?
  graded_timestamp            DateTime? @updatedAt

  @@unique([registration_id, assessment_id])
  @@index([assessment_id])
}

model Announcement {
  announcement_id    Int       @id @default(autoincrement())
  title              String
  content            String    @db.Text
  author_id          Int       // User ID of the author (staff/teacher)
  author             User      @relation("UserAuthoredAnnouncements", fields: [author_id], references: [user_id])
  target_audience    AnnouncementTargetAudience
  desired_tone       String?
  status             AnnouncementStatus @default(Draft)
  publish_date       DateTime?
  expiry_date        DateTime?
  department_id      Int?      // Optional: for department-specific announcements
  department         Department? @relation(fields: [department_id], references: [department_id])
  semester_id        Int?      // Optional: for semester-specific announcements
  semester           Semester? @relation("SemesterAnnouncements", fields: [semester_id], references: [semester_id])
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  targetSections AnnouncementTargetSection[]
}

model AnnouncementTargetSection {
  announcement_id     Int
  announcement        Announcement    @relation(fields: [announcement_id], references: [announcement_id])
  scheduled_course_id Int
  scheduledCourse     ScheduledCourse @relation(fields: [scheduled_course_id], references: [scheduled_course_id])

  @@id([announcement_id, scheduled_course_id])
  @@index([scheduled_course_id])
}


model AuditLog {
  log_id              Int       @id @default(autoincrement())
  user_id             Int?      // Nullable if system action
  user                User?     @relation("UserAuditLogs", fields: [user_id], references: [user_id])
  action_type         String    // e.g., USER_LOGIN, COURSE_CREATED, ANNOUNCEMENT_DELETED
  target_entity_type  String?   // e.g., User, Course, Semester
  target_entity_id    String?   // PK of the target entity
  timestamp           DateTime  @default(now())
  ip_address          String?
  details             String?   @db.Text // Additional details or old/new values
}

enum UserRole {
  Student
  Teacher
  Staff
}

enum SemesterTerm {
  Fall
  Spring
  Summer
  Winter
}

enum RegistrationStatus {
  Registered
  Dropped
  Completed
  Waitlisted
}

enum MaterialType {
  File
  Link
}

enum AnnouncementStatus {
  Draft
  Scheduled
  Published
  Archived
}

enum AnnouncementTargetAudience {
  Students
  Teachers
  Staff
  AllUsers // Use this for general announcements
}
