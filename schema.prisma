// schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id         Int      @id @default(autoincrement())
  username        String   @unique
  password_hash   String
  email           String   @unique
  role            UserRole
  first_name      String?
  last_name       String?
  phone_number    String?
  address         String?
  profile_picture_url String?
  is_active       Boolean  @default(true)
  is_super_admin  Boolean  @default(false) // Added for clarity if a user is super admin directly
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  student_profile Student? @relation("UserStudentProfile")
  teacher_profile Teacher? @relation("UserTeacherProfile")
  staff_profile   Staff?   @relation("UserStaffProfile")

  student_enrollments Registration[]       @relation("UserStudentEnrollments")
  courses_taught      ScheduledCourse[]    @relation("UserCoursesTaught")
  authored_announcements Announcement[]  @relation("UserAuthoredAnnouncements")
  uploaded_materials  CourseMaterial[]     @relation("UserUploadedMaterials")
  audit_logs          AuditLog[]           @relation("UserAuditLogs")

  department_id Int? // If a user (like staff or teacher) belongs to a department directly
  department    Department? @relation("UserDepartment", fields: [department_id], references: [department_id])


  @@index([role])
}

enum UserRole {
  Student
  Teacher
  Staff
}

model Department {
  department_id Int      @id @default(autoincrement())
  name          String   @unique
  description   String?  @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  courses           Course[]
  students          Student[]          @relation("StudentDepartment")
  teachers          Teacher[]          @relation("TeacherDepartment")
  users             User[]             @relation("UserDepartment") // Staff/Admins directly in a department
  department_head_id Int?            // Optional: if a department has a head (User ID)
  department_head    User?            @relation("DepartmentHeadUser", fields: [department_head_id], references: [user_id], onDelete: NullSet, onUpdate: Cascade)


  @@index([name])
}

model Course {
  course_id   Int     @id @default(autoincrement())
  course_code String  @unique
  title       String
  description String? @db.Text
  credits     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  department_id Int
  department    Department @relation(fields: [department_id], references: [department_id])

  prerequisitesRequired Prerequisite[] @relation("CoursePrerequisites") // Prerequisites FOR this course
  prerequisiteFor       Prerequisite[] @relation("PrerequisiteCourse")   // Courses FOR WHICH this course is a prerequisite

  scheduledCourses ScheduledCourse[]

  @@index([course_code])
  @@index([title])
}

model Prerequisite {
  prerequisite_id      Int @id @default(autoincrement())
  course_id            Int // The course that has this prerequisite
  prerequisite_course_id Int // The course that IS the prerequisite

  course             Course @relation("CoursePrerequisites", fields: [course_id], references: [course_id])
  prerequisiteCourse Course @relation("PrerequisiteCourse", fields: [prerequisite_course_id], references: [course_id])

  @@unique([course_id, prerequisite_course_id]) // A course cannot have the same prerequisite listed twice
  @@index([prerequisite_course_id])
}

model Student {
  student_id      Int      @id // This will be the same as User.user_id
  user            User     @relation("UserStudentProfile", fields: [student_id], references: [user_id])
  enrollment_date DateTime
  updated_at      DateTime @updatedAt

  department_id   Int
  department      Department @relation("StudentDepartment", fields: [department_id], references: [department_id])
  
  // Registrations moved to User model as student_enrollments
  // Transcript info would be derived from registrations

  @@map("students") // Explicit table name mapping
}

model Teacher {
  teacher_id      Int     @id // This will be the same as User.user_id
  user            User    @relation("UserTeacherProfile", fields: [teacher_id], references: [user_id])
  office_location String?
  updated_at      DateTime @updatedAt

  department_id   Int
  department      Department @relation("TeacherDepartment", fields: [department_id], references: [department_id])

  // Scheduled courses taught moved to User model as courses_taught
  
  @@map("teachers") // Explicit table name mapping
}

model Staff {
  staff_id   Int     @id // This will be the same as User.user_id
  user       User    @relation("UserStaffProfile", fields: [staff_id], references: [user_id])
  job_title  String?
  updated_at DateTime @updatedAt
  
  // is_super_admin flag can be on User model directly or here
  
  @@map("staffs") // Explicit table name mapping
}

model Semester {
  semester_id             Int      @id @default(autoincrement())
  name                    String
  academic_year           Int
  term                    SemesterTerm
  start_date              DateTime @db.Date
  end_date                DateTime @db.Date
  registration_start_date DateTime
  registration_end_date   DateTime
  add_drop_start_date     DateTime
  add_drop_end_date       DateTime
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  scheduledCourses ScheduledCourse[]
  announcements    Announcement[]    @relation("SemesterAnnouncements")

  @@index([academic_year, term])
}

enum SemesterTerm {
  Fall
  Spring
  Summer
  Winter
}

model Building {
  building_id Int      @id @default(autoincrement())
  name        String   @unique
  address     String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  rooms Room[]
}

model Room {
  room_id     Int      @id @default(autoincrement())
  room_number String
  capacity    Int
  type        String?  // e.g., Lecture Hall, Lab, Office
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  building_id Int
  building    Building @relation(fields: [building_id], references: [building_id])

  scheduledCourses ScheduledCourse[]

  @@unique([building_id, room_number])
}

model ScheduledCourse {
  scheduled_course_id Int      @id @default(autoincrement())
  section_number      String
  max_capacity        Int
  current_enrollment  Int      @default(0)
  days_of_week        String?  // e.g., MWF, TTH
  start_time          DateTime? @db.Time // Store as TIME type
  end_time            DateTime? @db.Time // Store as TIME type
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  course_id   Int
  course      Course   @relation(fields: [course_id], references: [course_id])
  semester_id Int
  semester    Semester @relation(fields: [semester_id], references: [semester_id])
  
  teacher_id  Int
  teacher     User     @relation("UserCoursesTaught", fields: [teacher_id], references: [user_id]) // Relation to User (Teacher)
  
  room_id     Int?
  room        Room?    @relation(fields: [room_id], references: [room_id])

  registrations Registration[]
  materials     CourseMaterial[]
  assessments   Assessment[]
  targetedByAnnouncements AnnouncementTargetSection[] @relation("ScheduledCourseTargetedAnnouncements")


  @@index([course_id, semester_id])
  @@index([teacher_id])
}

model Registration {
  registration_id     Int      @id @default(autoincrement())
  registration_date   DateTime @default(now())
  status              RegistrationStatus @default(Registered)
  overall_percentage  Float?
  final_letter_grade  String?
  grade_points        Float?   // Calculated: letter_grade_point * course_credits
  updated_at          DateTime @updatedAt

  student_id          Int
  student             User     @relation("UserStudentEnrollments", fields: [student_id], references: [user_id]) // Relation to User (Student)
  
  scheduled_course_id Int
  scheduledCourse     ScheduledCourse @relation(fields: [scheduled_course_id], references: [scheduled_course_id])

  assessment_scores   StudentAssessmentScore[] @relation("RegistrationScores")

  @@unique([student_id, scheduled_course_id]) // A student can only register once for the same scheduled course
  @@index([scheduled_course_id])
}

enum RegistrationStatus {
  Registered
  Dropped
  Completed
  Waitlisted
}

model CourseMaterial {
  material_id      Int      @id @default(autoincrement())
  title            String
  description      String?  @db.Text
  material_type    MaterialType
  file_path        String?  // For File type
  url              String?  // For Link type
  upload_timestamp DateTime @default(now())

  scheduled_course_id Int
  scheduledCourse     ScheduledCourse @relation(fields: [scheduled_course_id], references: [scheduled_course_id])
  
  uploaded_by_id      Int
  uploaded_by         User     @relation("UserUploadedMaterials", fields: [uploaded_by_id], references: [user_id]) // Relation to User (Teacher/Staff)
}

enum MaterialType {
  File
  Link
}

model Assessment {
  assessment_id   Int      @id @default(autoincrement())
  name            String
  max_score       Int
  assessment_type String?  // e.g., Quiz, Midterm, Final, Homework
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  scheduled_course_id Int
  scheduledCourse     ScheduledCourse @relation(fields: [scheduled_course_id], references: [scheduled_course_id])

  student_scores      StudentAssessmentScore[] @relation("AssessmentScores")
}

model StudentAssessmentScore {
  student_assessment_score_id Int @id @default(autoincrement())
  score_achieved              Float?
  graded_timestamp            DateTime? @default(now())

  registration_id Int
  registration    Registration @relation("RegistrationScores", fields: [registration_id], references: [registration_id])

  assessment_id   Int
  assessment      Assessment   @relation("AssessmentScores", fields: [assessment_id], references: [assessment_id])

  @@unique([registration_id, assessment_id])
}

model Announcement {
  announcement_id Int      @id @default(autoincrement())
  title           String
  content         String   @db.Text
  status          AnnouncementStatus @default(Draft)
  publish_date    DateTime?
  expiry_date     DateTime?
  desired_tone    String? // e.g., Formal, Urgent, Friendly
  target_audience AnnouncementTargetAudience @default(AllUsers)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  author_id       Int
  author          User     @relation("UserAuthoredAnnouncements", fields: [author_id], references: [user_id]) // User who created it
  
  department_id   Int?     // Optional: if specific to a department
  department      Department? @relation(fields: [department_id], references: [department_id])
  
  semester_id     Int?     // Optional: if specific to a semester
  semester        Semester?  @relation("SemesterAnnouncements", fields: [semester_id], references: [semester_id])

  targetSections  AnnouncementTargetSection[] @relation("AnnouncementTargetedSections")
}

enum AnnouncementStatus {
  Draft
  Scheduled
  Published
  Archived
}

enum AnnouncementTargetAudience {
  Students
  Teachers
  Staff
  AllUsers
}

model AnnouncementTargetSection {
  announcement_id      Int
  scheduled_course_id  Int

  announcement         Announcement    @relation("AnnouncementTargetedSections", fields: [announcement_id], references: [announcement_id])
  scheduledCourse      ScheduledCourse @relation("ScheduledCourseTargetedAnnouncements", fields: [scheduled_course_id], references: [scheduled_course_id])

  @@id([announcement_id, scheduled_course_id])
}


model AuditLog {
  log_id              Int      @id @default(autoincrement())
  timestamp           DateTime @default(now())
  action_type         String   // e.g., USER_LOGIN, COURSE_UPDATE, STUDENT_REGISTERED
  details             String?  @db.Text
  ip_address          String?
  target_entity_type  String?  // e.g., User, Course, Semester
  target_entity_id    String?  // String to accommodate various ID types or composite keys

  user_id             Int?     // User who performed the action (null if system action)
  user                User?    @relation("UserAuditLogs", fields: [user_id], references: [user_id])

  @@index([timestamp])
  @@index([action_type])
  @@index([user_id])
}
